{"version":3,"sources":["actions/actionCreators.js","actions/actionTypes.js","components/ServiceAdd.js","components/ServiceList.js","components/ServiceFilter.js","App.js","serviceWorker.js","reducers/serviceList.js","reducers/serviceAdd.js","reducers/serviceFilter.js","store/index.js","index.js"],"names":["filterService","filter","list","type","payload","ServiceAdd","item","useSelector","state","serviceAdd","dispatch","useDispatch","handleChange","evt","target","name","value","changeServiceField","className","onChange","placeholder","price","onClick","id","preventDefault","addService","ServiceList","items","serviceList","filterItems","serviceFilter","useState","data","setData","useEffect","console","log","res","map","o","key","handleEdit","removeService","ServiceFilter","App","Boolean","window","location","hostname","match","initialState","nanoid","reducer","combineReducers","action","Number","service","editedItem","toUpperCase","includes","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4588d285.chunk.js","sourcesContent":["import {\n  ADD_SERVICE,\n  REMOVE_SERVICE,\n  CHANGE_SERVICE_FIELD,\n  EDIT_SERVICE_FIELD,\n  EDIT_SERVICE,\n  CLEAR_SERVICE_FIELD,\n  FILTER_SERVICE,\n} from \"./actionTypes\";\n\nexport function addService(name, price) {\n  return { type: ADD_SERVICE, payload: { name, price } };\n}\n\nexport function removeService(id) {\n  return { type: REMOVE_SERVICE, payload: { id } };\n}\n\nexport function changeServiceField(name, value) {\n  return { type: CHANGE_SERVICE_FIELD, payload: { name, value } };\n}\n\nexport function editServiceField(id, name, price) {\n  return { type: EDIT_SERVICE_FIELD, payload: { id, name, price } };\n}\n\nexport function editService(id, name, price) {\n  return { type: EDIT_SERVICE, payload: { id, name, price } };\n}\n\nexport function clearServiceField() {\n  return { type: CLEAR_SERVICE_FIELD };\n}\nexport function filterService(filter, list) {\n  return { type: FILTER_SERVICE, payload: { filter, list } };\n}\n","export const ADD_SERVICE = 'ADD_SERVICE';\nexport const REMOVE_SERVICE = 'REMOVE_SERVICE';\nexport const CHANGE_SERVICE_FIELD = 'CHANGE_SERVICE_FIELD';\nexport const EDIT_SERVICE_FIELD = 'EDIT_SERVICE_FIELD';\nexport const EDIT_SERVICE = 'EDIT_SERVICE';\nexport const CLEAR_SERVICE_FIELD = 'CLEAR_SERVICE_FIELD';\nexport const FILTER_SERVICE = 'FILTER_SERVICE';\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  changeServiceField,\n  addService,\n  editService,\n  clearServiceField,\n} from \"../actions/actionCreators\";\n\nfunction ServiceAdd() {\n  const item = useSelector((state) => state.serviceAdd);\n  const dispatch = useDispatch();\n\n  const handleChange = (evt) => {\n    const { name, value } = evt.target;\n    dispatch(changeServiceField(name, value));\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    if (item.name === \"\") return;\n\n    if (item.id) {\n      dispatch(editService(item.id, item.name, item.price));\n    } else {\n      dispatch(addService(item.name, item.price));\n    }\n  };\n\n  const handleClear = (evt) => {\n    evt.preventDefault();\n    dispatch(clearServiceField());\n  };\n\n  return (\n    <div className=\"add_form\">\n      <input\n        className=\"form-control\"\n        name=\"name\"\n        onChange={handleChange}\n        value={item.name}\n        placeholder=\"Наименование\"\n      />\n      <input\n        className=\"form-control\"\n        name=\"price\"\n        type=\"number\"\n        onChange={handleChange}\n        value={item.price}\n        placeholder=\"Стоимость\"\n      />\n      <button className=\"btn btn-primary\" onClick={handleSubmit}>Save</button>\n      {item.id && <button className=\"btn btn-secondary\" onClick={handleClear}>Cancel</button>}\n    </div>\n  );\n}\n\nexport default ServiceAdd;\n","import { useEffect, useState } from \"react\";\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { removeService, editServiceField } from \"../actions/actionCreators\";\n\nfunction ServiceList() {\n  const items = useSelector((state) => state.serviceList);\n  const filterItems = useSelector((state) => state.serviceFilter);\n  const [data, setData] = useState(items);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    console.log(items);\n    console.log(filterItems);\n    const res = filterItems.filter ? filterItems.items : items;\n    setData(res);\n  }, [filterItems, items]);\n\n  const handleRemove = (id) => {\n    dispatch(removeService(id));\n  };\n\n  const handleEdit = (item) => {\n    dispatch(editServiceField(item.id, item.name, item.price));\n  };\n\n  return (\n    <ul className=\"list-group\">\n      {data.map((o) => (\n        <li key={o.id} className=\"list-group-item\">\n          {o.name} {o.price}\n          <div>\n            <button className=\"btn btn-secondary\" onClick={() => handleEdit(o)}>\n              E\n            </button>\n            <button\n              className=\"btn btn-danger\"\n              onClick={() => handleRemove(o.id)}\n            >\n              X\n            </button>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ServiceList;\n","import React from \"react\";\nimport { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { filterService } from \"../actions/actionCreators\";\n\nfunction ServiceFilter() {\n  const items = useSelector((state) => state.serviceFilter);\n  const list = useSelector((state) => state.serviceList);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(filterService(items.filter, list));\n  }, [list]);\n\n\n  const handleFilter = (evt) => {\n    const { value } = evt.target;\n    dispatch(filterService(value, list));\n  };\n\n  return (\n    <div className=\"filter_form\">\n      <input\n        className=\"form-control\"\n        onChange={handleFilter}\n        value={items.filter}\n        placeholder=\"Фильтрация...\"\n      />\n    </div>\n  );\n}\n\nexport default ServiceFilter;\n","import React from \"react\";\nimport ServiceAdd from \"./components/ServiceAdd\";\nimport ServiceList from \"./components/ServiceList\";\nimport ServiceFilter from \"./components/ServiceFilter\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"redux_filter\">\n      <ServiceAdd />\n      <ServiceFilter />\n      <ServiceList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import nanoid from \"nanoid\";\nimport {\n  ADD_SERVICE,\n  REMOVE_SERVICE,\n  EDIT_SERVICE,\n} from \"../actions/actionTypes\";\n\nconst initialState = [\n  { id: nanoid(), name: \"Замена стекла\", price: 21000 },\n  { id: nanoid(), name: \"Замена дисплея\", price: 25000 },\n];\n\nexport default function serviceListReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_SERVICE: {\n      const { name, price } = action.payload;\n      return [...state, { id: nanoid(), name, price: Number(price) }];\n    }\n    case REMOVE_SERVICE: {\n      const { id } = action.payload;\n      return state.filter((service) => service.id !== id);\n    }\n    case EDIT_SERVICE: {\n      const editedItem = { ...action.payload };\n      editedItem.price = Number(editedItem.price);\n      state = state.map((item) => item.id === editedItem.id ? editedItem : item );\n      return state;\n    }\n\n    default:\n      return state;\n  }\n}\n","import {\n  CHANGE_SERVICE_FIELD,\n  ADD_SERVICE,\n  EDIT_SERVICE_FIELD,\n  CLEAR_SERVICE_FIELD,\n  EDIT_SERVICE,\n  REMOVE_SERVICE,\n} from \"../actions/actionTypes\";\n\nconst initialState = {\n  name: \"\",\n  price: \"\",\n};\n\nexport default function serviceAddReducer(state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_SERVICE_FIELD: {\n      const { name, value } = action.payload;\n      return { ...state, [name]: value };\n    }\n    case EDIT_SERVICE_FIELD: {\n      return action.payload;\n    }\n    case REMOVE_SERVICE:\n    case EDIT_SERVICE:\n    case CLEAR_SERVICE_FIELD:\n    case ADD_SERVICE: {\n      return initialState;\n    }\n    default:\n      return state;\n  }\n}\n","import {\n  FILTER_SERVICE\n} from \"../actions/actionTypes\";\n\nconst initialState = {\n  items: [],\n  filter: \"\",\n};\n\nexport default function serviceFilterReducer(state = initialState, action) {\n  switch (action.type) {\n    case FILTER_SERVICE: {\n      const { filter, list } = action.payload;\n      return {\n        ...state,\n        items: list.filter((item) =>\n          item.name.toUpperCase().includes(filter.toUpperCase())\n        ),\n        filter: filter,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers } from \"redux\";\nimport serviceListReducer from \"../reducers/serviceList\";\nimport serviceAddReducer from \"../reducers/serviceAdd\";\nimport serviceFilterReducer from \"../reducers/serviceFilter\";\n\nconst reducer = combineReducers({\n  serviceList: serviceListReducer,\n  serviceAdd: serviceAddReducer,\n  serviceFilter: serviceFilterReducer,\n});\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}